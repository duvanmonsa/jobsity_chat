#!/usr/bin/env node

if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {
  require('dotenv').config({
    path: require('path').join(__dirname, '..', `${process.env.NODE_ENV}.env`)
  });
}

/**
 * Module dependencies.
 */

var app = require('../src/app');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// CHAT SERVER CONNECTION
const io = require('socket.io')(server)
const ChatRoomService = require('../src/services/ChatRoomService')
const AuthService = require('../src/services/AuthService')
const BotService = require('../src/services/BotService')

io.on('connection', (socket) => {
  socket.on('message', async (data) => {
    try {
      data.senderId = await AuthService.getUserIdFromToken(data.tokenId);
      delete data.tokenId;
      let newMessage;
      BotService.processMessage(data.text).then(async (response) => {
        if (!response) {
          newMessage = await ChatRoomService.addRoomMessage(data);
        }
        else {
          newMessage = response;
        }
        io.sockets.emit('new_message', newMessage);
      }).catch(err => {
        io.to(socket.id).emit('new_message', err);
      });
    }
    catch (err) {
      console.log(err);
    }
  })
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
}


module.exports = server;